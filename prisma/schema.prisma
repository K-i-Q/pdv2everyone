// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store {
  id           String          @id @default(cuid())
  name         String
  address      String
  createAt     DateTime
  status       Boolean
  CashRegister CashRegister[]
  userId       String?
  User         User?           @relation
  Employees    EmployeeStore[]
  Revenues     Revenue[]
}

model EmployeeStore {
  employeeId String
  storeId    String
  employee   Employee @relation(fields: [employeeId], references: [id])
  store      Store    @relation(fields: [storeId], references: [id])
  isPrimary  Boolean  @default(false)

  @@id([employeeId, storeId])
}

model CashRegister {
  id           String   @id @default(cuid())
  initialValue Float
  finalValue   Float?
  createAt     DateTime
  storeId      String   @unique
  store        Store    @relation(fields: [storeId], references: [id], onDelete: SetDefault)

  @@unique([id, storeId])
}

model Service {
  id          String   @id @default(cuid())
  description String
  name        String   @unique
  costPrice   Float
  salePrice   Float
  createAt    DateTime
  status      Boolean
}

model Sale {
  id                String              @id @default(cuid())
  grossPrice        Float
  netPrice          Float
  discount          Float?
  createAt          DateTime
  isDeferredPayment Boolean?            @default(false)
  pickupTime        String?
  deferredPayments  DeferredPayment[]
  note              String?
  items             ItemSale[]
  employees         EmployeeSale[]
  salePayments      SalePaymentMethod[]
  customerId        String?
  customer          Customer?           @relation(fields: [customerId], references: [id], onDelete: SetNull)
}

model DeferredPayment {
  id       String   @id @default(cuid())
  amount   Float // Valor a ser pago
  dueDate  DateTime // Data de vencimento do pagamento
  paid     Boolean  @default(false)
  forgiven Boolean  @default(false)
  saleId   String
  sale     Sale     @relation(fields: [saleId], references: [id], onDelete: SetDefault)
}

model SalePaymentMethod {
  saleId          String
  paymentMethodId String
  amount          Float // Valor pago por este método de pagamento
  sale            Sale          @relation(fields: [saleId], references: [id], onDelete: SetDefault)
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: SetDefault)

  @@id([saleId, paymentMethodId])
}

model EmployeeSale {
  employeeId          String
  saleId              String
  employee            Employee @relation(fields: [employeeId], references: [id], onDelete: SetDefault)
  sale                Sale     @relation(fields: [saleId], references: [id], onDelete: SetDefault)
  initiatedByEmployee Boolean  @default(false)
  completedByEmployee Boolean  @default(false)

  @@id([employeeId, saleId])
}

model ExpenseType {
  id       String    @id @default(cuid())
  name     String // Ex: Manutenção, Cliente, Aluguel, Dívida perdoada, etc.
  expenses Expense[]
}

model Expense {
  id                  String      @id @default(cuid())
  amount              Float // Valor da despesa
  description         String
  createAt            DateTime
  dueDate             DateTime? // Data de vencimento da despesa
  isRecurring         Boolean     @default(false) // Indica se a despesa é recorrente
  recurrenceFrequency String? // Frequência da recorrência (por exemplo, 'mensal', 'anual', etc.)
  nextDueDate         DateTime? // Próxima data de vencimento para despesas recorrentes
  isActive            Boolean     @default(true) // Indica se a despesa recorrente está ativa
  expenseType         ExpenseType @relation(fields: [expenseTypeId], references: [id], onDelete: SetDefault)
  expenseTypeId       String
}

model Revenue {
  id                String   @id @default(cuid())
  createAt          DateTime
  totalSales        Float
  totalExpenses     Float
  serviceRevenue    Float // Receita de serviços
  productRevenue    Float // Receita de produtos
  laborCosts        Float // Custos de mão de obra
  materialCosts     Float // Custos de materiais/suprimentos
  equipmentCosts    Float // Custos com equipamentos
  adminExpenses     Float // Despesas administrativas
  marketingExpenses Float // Despesas de marketing
  serviceCount      Int // Número de serviços realizados
  averageTicket     Float // Ticket médio
  storeId           String
  store             Store    @relation(fields: [storeId], references: [id], onDelete: SetDefault)
}

model Vehicle {
  id           String     @id @default(cuid())
  model        String
  licensePlate String     @unique
  customerId   String?
  customer     Customer?  @relation(fields: [customerId], references: [id], onDelete: SetNull)
  itemSales    ItemSale[]

  @@unique([id, customerId])
}

model ItemSale {
  id        String   @id @default(cuid())
  productId String?
  serviceId String?
  isGift    Boolean  @default(false)
  saleId    String
  quantity  Int
  vehicleId String?
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model PaymentMethod {
  id           String              @id @default(cuid())
  description  String
  createAt     DateTime
  salePayments SalePaymentMethod[]
  status       Boolean
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  costPrice   Float
  salePrice   Float
  createAt    DateTime
  supplierId  String?
  supplier    Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  status      Boolean
}

model Supplier {
  id       String    @id @default(cuid())
  name     String
  email    String?
  document String    @unique
  products Product[]
  phone    String
}

model Employee {
  id         String          @id @default(cuid())
  name       String
  document   String          @unique
  nickname   String?
  gender     String
  phone      String
  createAt   DateTime
  birthday   DateTime
  status     Boolean
  commission Float
  stores     EmployeeStore[]
  sales      EmployeeSale[]
  salaries   Salary[]
  advances   Advance[]
  user       User?           @relation

  @@unique([id, document])
}

model Salary {
  id         String   @id @default(cuid())
  amount     Float // Valor do salário do dia
  createAt   DateTime // Data do salário
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: SetDefault)
}

model Advance {
  id         String   @id @default(cuid())
  amount     Float // Valor do adiantamento
  createAt   DateTime // Data do adiantamento
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: SetDefault)
}

model Customer {
  id       String           @id @default(cuid())
  name     String?
  birthday DateTime?
  nickname String?
  gender   String?
  document String           @unique
  phone    String?
  Sales    Sale[]
  credits  CustomerCredit[]
  Vehicles Vehicle[]

  @@unique([id, document])
}

model CustomerCredit {
  id         String   @id @default(cuid())
  amount     Float // Valor do crédito
  createAt   DateTime // Data de criação do crédito
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: SetDefault)
}

model Profile {
  id       String   @id @default(cuid())
  name     String   @unique
  status   Boolean
  createAt DateTime
  users    User[]
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  status                Boolean
  createAt              DateTime
  employee              Employee?              @relation(fields: [employeeId], references: [id], onDelete: SetDefault)
  store                 Store?                 @relation(fields: [storeId], references: [id], onDelete: SetDefault)
  profile               Profile?               @relation(fields: [profileId], references: [id], onDelete: SetDefault)
  employeeId            String?                @unique
  storeId               String?                @unique
  profileId             String?                @unique
  image                 String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Lead {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  whatsapp     String
  code         String
  isDownloaded Boolean
}
